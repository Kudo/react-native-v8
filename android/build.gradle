/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 * Copyright (c) Software Mansion <swmansion.com>.
 * Copyright (c) 650 Industries.
 * Copyright (c) Kudo Chien.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

import groovy.json.JsonSlurper
import org.apache.tools.ant.taskdefs.condition.Os


File findNodePackageDir(String packageName, boolean absolute = true) {
  def nodeCommand = ["node", "--print", "require.resolve('${packageName}/package.json')"]
  def proc = nodeCommand.execute(null, rootDir)
  def error = proc.err.text
  if (error) {
    throw new GradleException("findNodePackageDir() execution failed - nodeCommand[${nodeCommand.join(' ')}]\n" + error)
  }
  def dir = new File(proc.text.trim()).getParentFile()
  return absolute ? dir.getAbsoluteFile() : dir
}

String toPlatformFileString(File path) {
  def result = path.toString()
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    result = result.replace(File.separatorChar, '/' as char)
  }
  return result
}

def safeExtGet(prop, fallback) {
  return rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

def reactNativeDir = findNodePackageDir("react-native")
def reactNativeManifest = file("${reactNativeDir}/package.json")
def reactNativeManifestAsJson = new JsonSlurper().parseText(reactNativeManifest.text)
def reactNativeVersion = reactNativeManifestAsJson.version as String
def (major, minor, patch) = reactNativeVersion.tokenize('.')
def rnMinorVersion = Integer.parseInt(minor)
def extractSoDir = "${buildDir}/jniLibs"
def prefabHeadersDir = "${buildDir}/prefab-headers"

def appProject = findProject(":app") ? project(":app") : null
if (appProject?.ext?.react?.enableHermes) {
  throw new GradleException("Please disable Hermes because Hermes will transform the JavaScript bundle as bytecode bundle.\n")
}

def findV8AndroidDir() {
  def v8Packages = [
    "v8-android-jit",
    "v8-android",
    "v8-android-jit-nointl",
    "v8-android-nointl",
  ]
  for (pkg in v8Packages) {
    try {
      return findNodePackageDir(pkg)
    } catch (Exception e) {
    }
  }
  throw new GradleException("Unable to find v8 package. Please install a package from the following v8 variants:\n" +
  "  - v8-android-jit\n" +
  "  - v8-android-jit-nointl\n" +
  "  - v8-android\n" +
  "  - v8-android-nointl\n")
}

def v8AndroidDir = findProperty("v8.android.dir") ?: findV8AndroidDir()
def v8AndroidVersion = new JsonSlurper().parseText(file("${v8AndroidDir}/package.json").text).version as String
logger.info("v8AndroidVersion[${v8AndroidVersion}]")
def v8AndroidVersionMajor = Integer.parseInt(v8AndroidVersion.tokenize('.')[0])

def v8UseSnapshot = v8AndroidVersionMajor >= 10

// Sanity checks for versions
if (rnMinorVersion > 0 && rnMinorVersion < 71) {
  throw new GradleException("This react-native-v8 version only supports react-native>=0.71.0.")
}
if (v8AndroidVersionMajor < 11) {
  throw new GradleException("This react-native-v8 version only supports v8-android-*>=11.0.0.")
}

// These constant values should align to V8RuntimeConfig.java
ext.CODECACHE_MODE_NONE = 0
ext.CODECACHE_MODE_NORMAL = 1
ext.CODECACHE_MODE_STUB_BUNDLE = 2
def parseCacheMode(cacheMode) {
  switch (cacheMode) {
    case null:
      // Use normal mode by default
      return ext.CODECACHE_MODE_NORMAL
    case "none":
      return ext.CODECACHE_MODE_NONE
    case "normal":
      return ext.CODECACHE_MODE_NORMAL
    case "stubBundle":
    case "normalWithStubBundle":
      return ext.CODECACHE_MODE_STUB_BUNDLE
    default:
      throw new GradleException("Unsupported cache mode - ${cacheMode}")
  }
}
def v8CacheMode = parseCacheMode(findProperty("v8.cacheMode"))

def reactProperties = new Properties()
file("${reactNativeDir}/ReactAndroid/gradle.properties").withInputStream { reactProperties.load(it) }

def reactNativeArchitectures() {
  def value = project.getProperties().get("reactNativeArchitectures")
  return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

apply plugin: "com.android.library"

android {
  compileSdkVersion safeExtGet("compileSdkVersion", 33)

  if (rootProject.hasProperty("ndkPath")) {
    ndkPath rootProject.ext.ndkPath
  }
  if (rootProject.hasProperty("ndkVersion")) {
    ndkVersion rootProject.ext.ndkVersion
  }

  defaultConfig {
    minSdkVersion safeExtGet("minSdkVersion", 21)
    targetSdkVersion safeExtGet("targetSdkVersion", 33)
    versionCode 1
    versionName "1.0"
    externalNativeBuild {
      cmake {
        arguments "-DANDROID_STL=c++_shared",
                  "-DREACT_NATIVE_DIR=${toPlatformFileString(reactNativeDir)}",
                  "-DREACT_NATIVE_MINOR_VERSION=${rnMinorVersion}",
                  "-DV8_ANDROID_DIR=${v8AndroidDir}",
                  "-DSO_DIR=${extractSoDir}"
        targets   "v8executor"
        abiFilters (*reactNativeArchitectures())
      }
    }

    buildConfigField("boolean", "V8_USE_SNAPSHOT", v8UseSnapshot.toString())
    buildConfigField("int", "V8_CACHE_MODE", v8CacheMode.toString())
  }
  externalNativeBuild {
    cmake {
      path "CMakeLists.txt"
    }
  }
  lintOptions {
    abortOnError false
  }
  packagingOptions {
    // Uncomment to keep debug symbols
    // doNotStrip "**/*.so"

    excludes += [
      "**/libc++_shared.so",
      "**/libfbjni.so",
      "**/libjsi.so",
      "**/libfolly_runtime.so",
      "**/libglog.so",
      "**/libreactnativejni.so",
      "**/libjsinspector.so",
      "**/libruntimeexecutor.so",
    ]
    pickFirst "**/libv8android.so"
  }
  configurations {
    extractHeaders
    extractSO
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
  sourceSets {
    main {
      jniLibs.srcDirs += ["${extractSoDir}/v8/jni"]

      if (v8UseSnapshot) {
        assets.srcDirs += [ "${v8AndroidDir}/dist/snapshot_blob" ]
      }

      if (v8CacheMode == CODECACHE_MODE_STUB_BUNDLE) {
        assets.srcDirs += [ "src/stub_bundle" ]
      }
    }
  }

  buildFeatures {
    prefab true
    prefabPublishing true
  }

  prefab {
    v8executor {
      headers file(prefabHeadersDir).absolutePath
    }
  }
}

task cleanCmakeCache() {
  tasks.getByName("clean").dependsOn(cleanCmakeCache)
  doFirst {
    delete "${projectDir}/.cxx"
  }
}

task prepareHeadersForPrefab(type: Copy) {
  from("${projectDir}/../src/v8runtime")
  include("**/*.h")
  into(file("${prefabHeadersDir}/v8runtime"))
}

task extractSOFiles {
  doLast {
    configurations.extractSO.files.each {
      def file = it.absoluteFile
      def packageName = file.name.tokenize('-')[0]
      copy {
        from zipTree(file)
        into "${extractSoDir}/${packageName}"
        include "jni/**/*.so"
      }
    }
  }
}

dependencies {
  // noinspection GradleDynamicVersion
  implementation "com.facebook.yoga:proguard-annotations:1.19.0"
  compileOnly "com.facebook.fbjni:fbjni:0.3.0"
  implementation "com.facebook.react:react-android"

  def v8AAR = fileTree("${v8AndroidDir}/dist").matching({ it.include "**/**/*.aar" }).singleFile
  extractSO(files(v8AAR))
}

def nativeBuildDependsOn(dependsOnTask, buildTypesIncludes) {
  def buildTasks = tasks.findAll { task ->
    def taskName = task.name
    if (taskName.contains("Clean")) { return false }
    if (taskName.contains("externalNative") || taskName.contains("CMake") || taskName.contains("generateJsonModel")) {
      if (buildTypesIncludes == null) { return true }
      for (buildType in buildTypesIncludes) {
        if (taskName.contains(buildType)) { return true }
      }
    }
    return false
  }
  buildTasks.forEach { task -> task.dependsOn(dependsOnTask) }
}

afterEvaluate {
  preBuild.dependsOn(prepareHeadersForPrefab)

  nativeBuildDependsOn(extractSOFiles, null)

  tasks.findByName("mergeReleaseJniLibFolders")?.dependsOn(extractSOFiles)
  tasks.findByName("mergeDebugJniLibFolders")?.dependsOn(extractSOFiles)
}
