diff --git a/ReactAndroid/build.gradle b/ReactAndroid/build.gradle
index 47ca5df..d682b41 100644
--- a/ReactAndroid/build.gradle
+++ b/ReactAndroid/build.gradle
@@ -166,6 +166,28 @@ tasks.register('prepareJSC', PrepareJSCTask) {
     it.outputDir = project.layout.buildDirectory.dir("third-party-ndk/jsc")
 }
 
+task prepareV8(dependsOn: createNativeDepsDirectories, type: Copy) {
+    def v8PackagePath = findNodeModulePath(projectDir, "v8-android-jit")
+    if (!v8PackagePath) {
+        throw new GradleScriptException("Could not find the v8-android-jit npm package")
+    }
+
+    def v8Dist = file("$v8PackagePath/dist")
+    if (!v8Dist.exists()) {
+        throw new GradleScriptException("The v8-android-jit npm package is missing its \"dist\" directory")
+    }
+
+    def v8AAR = fileTree(v8Dist).matching({ it.include "**/v8-android/**/*.aar" }).singleFile
+    def soFiles = zipTree(v8AAR).matching({ it.include "**/*.so" })
+    def headerFiles = fileTree(v8Dist).matching({ it.include "**/include/**" })
+
+    from(soFiles)
+    from(headerFiles)
+    from("src/main/jni/third-party/v8/Android.mk")
+    includeEmptyDirs(false)
+    into("$thirdPartyNdkDir/v8")
+}
+
 task downloadNdkBuildDependencies {
     if (!boostPath) {
         dependsOn(downloadBoost)
@@ -241,6 +263,7 @@ tasks.register("packageReactNdkDebugLibsForBuck", Copy) {
     from("$buildDir/intermediates/merged_native_libs/debug/out/lib/")
     exclude("**/libjsc.so")
     exclude("**/libhermes.so")
+    exclude("**/libv8android.so")
     into("src/main/jni/prebuilt/lib")
 }
 
@@ -249,6 +272,7 @@ tasks.register("packageReactNdkReleaseLibsForBuck", Copy) {
     from("$buildDir/intermediates/merged_native_libs/release/out/lib/")
     exclude("**/libjsc.so")
     exclude("**/libhermes.so")
+    exclude("**/libv8android.so")
     into("src/main/jni/prebuilt/lib")
 }
 
@@ -323,7 +347,7 @@ android {
         }
     }
 
-    preBuild.dependsOn(prepareJSC, prepareHermes, prepareBoost, prepareDoubleConversion, prepareFmt, prepareFolly, prepareGlog, prepareLibevent, extractNativeDependencies)
+    preBuild.dependsOn(prepareJSC, prepareHermes, prepareV8, prepareBoost, prepareDoubleConversion, prepareFmt, prepareFolly, prepareGlog, prepareLibevent, extractNativeDependencies)
     preBuild.dependsOn("generateCodegenArtifactsFromSchema")
 
     sourceSets.main {
diff --git a/ReactAndroid/src/main/java/com/facebook/react/ReactInstanceManagerBuilder.java b/ReactAndroid/src/main/java/com/facebook/react/ReactInstanceManagerBuilder.java
index 55af8c4..f4315d0 100644
--- a/ReactAndroid/src/main/java/com/facebook/react/ReactInstanceManagerBuilder.java
+++ b/ReactAndroid/src/main/java/com/facebook/react/ReactInstanceManagerBuilder.java
@@ -34,6 +34,8 @@ import com.facebook.react.jscexecutor.JSCExecutorFactory;
 import com.facebook.react.modules.core.DefaultHardwareBackBtnHandler;
 import com.facebook.react.packagerconnection.RequestHandler;
 import com.facebook.react.uimanager.UIImplementationProvider;
+import com.facebook.v8.reactexecutor.V8ExecutorFactory;
+import com.facebook.v8.reactexecutor.V8RuntimeConfig;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
@@ -315,7 +317,7 @@ public class ReactInstanceManagerBuilder {
         mCurrentActivity,
         mDefaultHardwareBackBtnHandler,
         mJavaScriptExecutorFactory == null
-            ? getDefaultJSExecutorFactory(appName, deviceName, mApplication.getApplicationContext())
+            ? getDefaultJSExecutorFactory(appName, deviceName, mApplication.getApplicationContext(), mUseDeveloperSupport)
             : mJavaScriptExecutorFactory,
         (mJSBundleLoader == null && mJSBundleAssetUrl != null)
             ? JSBundleLoader.createAssetLoader(
@@ -344,42 +346,8 @@ public class ReactInstanceManagerBuilder {
   }
 
   private JavaScriptExecutorFactory getDefaultJSExecutorFactory(
-      String appName, String deviceName, Context applicationContext) {
-    try {
-      // If JSC is included, use it as normal
-      initializeSoLoaderIfNecessary(applicationContext);
-      JSCExecutor.loadLibrary();
-      return new JSCExecutorFactory(appName, deviceName);
-    } catch (UnsatisfiedLinkError jscE) {
-      // https://github.com/facebook/hermes/issues/78 shows that
-      // people who aren't trying to use Hermes are having issues.
-      // https://github.com/facebook/react-native/issues/25923#issuecomment-554295179
-      // includes the actual JSC error in at least one case.
-      //
-      // So, if "__cxa_bad_typeid" shows up in the jscE exception
-      // message, then we will assume that's the failure and just
-      // throw now.
-
-      if (jscE.getMessage().contains("__cxa_bad_typeid")) {
-        throw jscE;
-      }
-
-      // Otherwise use Hermes
-      try {
-        HermesExecutor.loadLibrary();
-        return new HermesExecutorFactory();
-      } catch (UnsatisfiedLinkError hermesE) {
-        // If we get here, either this is a JSC build, and of course
-        // Hermes failed (since it's not in the APK), or it's a Hermes
-        // build, and Hermes had a problem.
-
-        // We suspect this is a JSC issue (it's the default), so we
-        // will throw that exception, but we will print hermesE first,
-        // since it could be a Hermes issue and we don't want to
-        // swallow that.
-        hermesE.printStackTrace();
-        throw jscE;
-      }
-    }
+      String appName, String deviceName, Context applicationContext, boolean useDeveloperSupport) {
+    // initializeSoLoaderIfNecessary(applicationContext);
+    return new V8ExecutorFactory(appName, deviceName, useDeveloperSupport);
   }
 }
diff --git a/ReactAndroid/src/main/jni/react/jni/Android.mk b/ReactAndroid/src/main/jni/react/jni/Android.mk
index 46548e2..520f46a 100644
--- a/ReactAndroid/src/main/jni/react/jni/Android.mk
+++ b/ReactAndroid/src/main/jni/react/jni/Android.mk
@@ -128,6 +128,8 @@ $(call import-module,logger)
 $(call import-module,callinvoker)
 $(call import-module,reactperflogger)
 $(call import-module,hermes)
+$(call import-add-path, $(REACT_COMMON_DIR)/jsi)
+$(call import-module,v8runtime)
 $(call import-module,runtimeexecutor)
 $(call import-module,react/renderer/runtimescheduler)
 $(call import-module,react/nativemodule/core)
@@ -146,6 +148,7 @@ include $(REACT_SRC_DIR)/common/mapbuffer/jni/Android.mk
 include $(REACT_SRC_DIR)/jscexecutor/Android.mk
 include $(REACT_SRC_DIR)/../hermes/reactexecutor/Android.mk
 include $(REACT_SRC_DIR)/../hermes/instrumentation/Android.mk
+include $(REACT_SRC_DIR)/../v8/reactexecutor/Android.mk
 include $(REACT_SRC_DIR)/modules/blob/jni/Android.mk
 
 include $(REACT_GENERATED_SRC_DIR)/codegen/jni/Android.mk
diff --git a/ReactCommon/cxxreact/Android.mk b/ReactCommon/cxxreact/Android.mk
index 392c33b..e792380 100644
--- a/ReactCommon/cxxreact/Android.mk
+++ b/ReactCommon/cxxreact/Android.mk
@@ -34,4 +34,5 @@ $(call import-module,jsi)
 $(call import-module,jsinspector)
 $(call import-module,hermes/inspector)
 $(call import-module,hermes/executor)
+$(call import-module,v8)
 $(call import-module,logger)
